pipeline {
    agent {
      node {
        // spin up a pod to run this build on
        label 'docker'
      }
    }
    options {
        timeout(time: 45, unit: 'MINUTES')
    }
    environment {
        REF_TAG = sh(returnStdout: true, script: "git describe --exact-match --tags $env.GIT_COMMIT || echo noTagMatches").trim()
        REF_TAG_COMMIT = sh(returnStdout: true, script: "git tag --points-at $env.GIT_COMMIT --sort taggerdate | tail -1").trim()
    }
    stages {
     stage('Preamble') {
            steps {
                echo "COMMIT: ${env.GIT_COMMIT}"
                echo "REF TAG: ${env.REF_TAG}"
                echo "REF TAG COMMIT: ${env.REF_TAG_COMMIT}"
            }
        }


    stage('get latest tag') {
            steps {
             script {
             latestTag = sh(returnStdout:  true, script: "git tag --sort=-creatordate | head -n 1").trim()
             env.BUILD_VERSION = latestTag
             echo "env-BUILD_VERSION"
             echo "${env.BUILD_VERSION}"
            }
        }
    }

    stage('get current tag') {
            steps {
             script {
             currentTag = sh(returnStdout:  true, script: "script: 'git tag -l --points-at HEAD'").trim()
             env.CURRENT_VERSION = currentTag
             echo "${env.CURRENT_VERSION}"
             sh("git checkout " + currentTag)
             echo " checkout ${env.CURRENT_VERSION}" 
            }
        }
    }


        stage('Build docker image') {
            steps {
                echo "mock build step"
            }
        }
        stage('Tag and deploy QAS') {
            steps {
                echo "mock tag and deploy QAS"
            }
        }
        stage('Tag and deploy PRD') {
            when {
                expression { env.REF_TAG_COMMIT !=  null }
            }
            steps {
                echo "mock tag and deploy PRD - ${env.REF_TAG_COMMIT}"
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
