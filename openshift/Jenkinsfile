pipeline {
    agent {
      node {
        // spin up a pod to run this build on
        label 'docker'
      }
    }
    options {
        timeout(time: 45, unit: 'MINUTES')
    }
    environment {
        REF_TAG = sh(returnStdout: true, script: "git describe --exact-match --tags $env.GIT_COMMIT || echo noTagMatches").trim()
        REF_TAG_COMMIT = sh(returnStdout: true, script: "git tag --points-at $env.GIT_COMMIT --sort taggerdate | tail -1").trim()
        
    }
    stages {
     stage('Preamble') {
            steps {
                echo "COMMIT: ${env.GIT_COMMIT}"
                echo "REF TAG: ${env.REF_TAG}"
                echo "REF TAG COMMIT: ${env.REF_TAG_COMMIT}"
                echo "TAG_NAME: ${env.TAG_NAME}"
            }
        }


    stage('get latest tag') {
            steps {
             script {
             latestTag = sh(returnStdout:  true, script: "git tag --sort=-creatordate | head -n 1").trim()
             echo("i found latest tag " +latestTag)
             latestTagRef = sh(returnStdout:  true, script: "git log $latestTag| head -n 1 | cut -d ' ' -f 2").trim()
             echo "latest tag ref:  ${latestTagRef}"
             latestRef = sh(returnStdout:  true, script: "git log | head -n 1 | cut -d ' ' -f 2").trim()
             echo ("the latest ref is $latestRef")
             def refTagCommit = sh(returnStdout:  true, script: "echo ${env.REF_TAG_COMMIT}").trim()
             echo("the ref of the current Tag is $refTagCommit")
             if ( refTagCommit != "null" ){
             currentTagRef = sh(returnStdout:  true, script: "git log ${env.REF_TAG_COMMIT}| head -n 1 | cut -d ' ' -f 2").trim()}
             else {currentTagRef = "undefind"} 
             echo "currentTagRef " +currentTagRef
             if( latestRef ==  latestTagRef ) {
                sh("echo the shas are the same")
                sh("echo TRUE latestTagRef == latestRef > .deploy")
                sh("echo ${env.REF_TAG_COMMIT}")
                sh("git checkout ${env.REF_TAG_COMMIT}") //latest tag == latest commit
             }else if (latestRef  != currentTagRef) {
                if (currentTagRef != "undefind"){
                sh("echo this is a new tag on old commit")
                sh("echo oldcommit TRUE > .deploy")
                sh("echo ${env.REF_TAG_COMMIT}")
                sh("git checkout " + currentTagRef)}
                else{
                  sh("echo FALSE > .deploy")
                  echo ("/push to master withjout tag choukout latest ref")
                  sh("git checkout " + latestRef) //push to master withjout tag
                }

             } 
             else{
             sh("git checkout " + latestRef)
             echo ("no tag on commit")
             sh("echo FALSE latestRef > .deploy")}//no tag on commit

            }
            sh("echo deploy PRD  is `cat .deploy`")
        }
    }




        stage('Build docker image') {
            steps {
                echo "mock build step"
            }
        }
        stage('Tag and deploy QAS') {
            steps {
                echo "mock tag and deploy QAS"
            }
        }
        stage('Tag and deploy PRD') {
            when {
                expression { env.REF_TAG_COMMIT !=  null }
            }
            steps {
                echo "mock tag and deploy PRD - ${env.REF_TAG_COMMIT}"
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
